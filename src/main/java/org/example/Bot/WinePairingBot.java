package org.example.Bot;

import org.example.Bot.Commands.Command;
import org.example.Bot.Commands.Factories.CommandFactory;
import org.example.Bot.Commands.StartCommand;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import java.util.*;


/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π –≤–∏–Ω–∞ –∏ –±–ª—é–¥.
 */
public class WinePairingBot extends TelegramLongPollingBot {
    private final String botToken;
    private final String botUsername;
    private final Map<Long, Boolean> ageVerifiedUsers = new HashMap<>();

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–∞
     * @param botToken —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
     * @param botUsername –∏–º—è –±–æ—Ç–∞
     */
    public WinePairingBot(String botToken, String botUsername) {
        this.botToken = Objects.requireNonNull(botToken, "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        this.botUsername = Objects.requireNonNull(botUsername, "–ò–º—è –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            try {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (–≤—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç)
                if ("/start".equalsIgnoreCase(messageText)) {
                    SendMessage message = new SendMessage();
                    message.setChatId(String.valueOf(chatId));
                    message.setText("üç∑ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞*\n\n" +
                            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18 –ª–µ—Ç –∏–ª–∏ –±–æ–ª—å—à–µ.\n\n" +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990):");
                    message.setParseMode("Markdown");
                    execute(message);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
                if (messageText.matches("\\d{2}\\.\\d{2}\\.\\d{4}")) {
                    if (isUserAdult(messageText, update)) {  // –ü–µ—Ä–µ–¥–∞–µ–º update –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
                        // –í–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        execute(createStartMessage(chatId));
                    } else {
                        SendMessage message = new SendMessage();
                        message.setChatId(String.valueOf(chatId));
                        message.setText("‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n\n" +
                                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –º–µ–Ω—å—à–µ 18 –ª–µ—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
                        message.setParseMode("Markdown");
                        execute(message);
                    }
                    return;
                }

                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ /start –∏ –Ω–µ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                if (!ageVerifiedUsers.getOrDefault(chatId, false)) {
                    SendMessage message = new SendMessage();
                    message.setChatId(String.valueOf(chatId));
                    message.setText("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start");
                    execute(message);
                    return;
                }

                // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
                Command command = CommandFactory.getCommand(messageText, chatId);
                SendMessage response = command.execute(String.valueOf(chatId), messageText);
                execute(response);

            } catch (TelegramApiException e) {
                sendErrorMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
                e.printStackTrace();
            } catch (Exception e) {
                sendErrorMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    public boolean isUserAdult(String input, Update update) {  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä Update
        // –ï—Å–ª–∏ input - —ç—Ç–æ chatId (—á–∏—Å–ª–æ), –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–∞—Ä—Ç–µ ageVerifiedUsers
        try {
            long chatId = Long.parseLong(input);
            return ageVerifiedUsers.getOrDefault(chatId, false);
        } catch (NumberFormatException e) {
            // –ï—Å–ª–∏ input –Ω–µ —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
                Date birthDateObj = sdf.parse(input);
                Calendar birth = Calendar.getInstance();
                birth.setTime(birthDateObj);
                Calendar today = Calendar.getInstance();

                int age = today.get(Calendar.YEAR) - birth.get(Calendar.YEAR);
                if (today.get(Calendar.MONTH) < birth.get(Calendar.MONTH) ||
                        (today.get(Calendar.MONTH) == birth.get(Calendar.MONTH) &&
                                today.get(Calendar.DAY_OF_MONTH) < birth.get(Calendar.DAY_OF_MONTH))) {
                    age--;
                }

                // –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ä—Ç—É
                if (age >= 18) {
                    ageVerifiedUsers.put(update.getMessage().getChatId(), true);
                }

                return age >= 18;
            } catch (Exception ex) {
                return false;
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
     */
        private SendMessage createStartMessage(long chatId) {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.enableMarkdown(true);

            String welcomeText = "üç∑ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* üçΩ\n\n" +
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–∏–Ω –∏ –±–ª—é–¥.\n\n" +
                    "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
                    "/pair - –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏—è –¥–ª—è –≤–∏–Ω–∞\n" +
                    "/red - –∫—Ä–∞—Å–Ω—ã–µ –≤–∏–Ω–∞\n" +
                    "/white - –±–µ–ª—ã–µ –≤–∏–Ω–∞\n" +
                    "/rose - —Ä–æ–∑–æ–≤—ã–µ –≤–∏–Ω–∞\n" +
                    "/dessert - –¥–µ—Å–µ—Ä—Ç–Ω—ã–µ –≤–∏–Ω–∞\n" +
                    "/wines - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–Ω\n" +
                    "/dishes - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥\n" +
                    "/rate - –æ—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ\n" +
                    "/favorites - –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è\n" +
                    "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n" +
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

            message.setText(welcomeText);
            message.setReplyMarkup(createMainKeyboard());

            return message;
        }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
     */
    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        KeyboardRow row1 = new KeyboardRow();
        row1.add("/red");
        row1.add("/white");
        row1.add("/rose");
        row1.add("/dessert");

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        KeyboardRow row2 = new KeyboardRow();
        row2.add("/wines");
        row2.add("/dishes");
        row2.add("/pair");

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        KeyboardRow row3 = new KeyboardRow();
        row3.add("/rate");
        row3.add("/favorites");
        row3.add("/help");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    private void sendErrorMessage(long chatId, String errorMessage) {
        SendMessage errorResponse = new SendMessage();
        errorResponse.setChatId(String.valueOf(chatId));
        errorResponse.setText(errorMessage);

        try {
            execute(errorResponse);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}