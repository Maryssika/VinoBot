package org.example.Bot.Commands.Factories;

import io.github.cdimascio.dotenv.Dotenv;
import org.example.Bot.Commands.*;
import org.example.DAO.Dish;
import org.example.DAO.DishDAO;
import org.example.DAO.Wine;
import org.example.DAO.WineDAO;
import org.example.Utils.ExcelFavoritesManager;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.*;
import java.util.function.Function;

/**
 * –§–∞–±—Ä–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
 */

public class CommandFactory {
    private static final WineDAO wineDAO;
    private static final DishDAO dishDAO;
    private static final Map<Long, String> userStates = new HashMap<>();
    private static final Map<Long, PairingContext> pairingContexts = new HashMap<>();
    private static final Map<Long, Boolean> waitingForWineInput = new HashMap<>();

    static {
        try {
            Dotenv dotenv = loadConfiguration();
            Connection connection = createDatabaseConnection(dotenv);
            wineDAO = new WineDAO(connection);
            dishDAO = new DishDAO(connection);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CommandFactory", e);
        }
    }


    private static Dotenv loadConfiguration() {
        Dotenv dotenv = Dotenv.configure().ignoreIfMissing().load();
        validateEnvVariable(dotenv, "POSTGRES_URL");
        validateEnvVariable(dotenv, "POSTGRES_USER");
        validateEnvVariable(dotenv, "POSTGRES_PASSWORD");
        validateEnvVariable(dotenv, "BOT_TOKEN");
        validateEnvVariable(dotenv, "BOT_USERNAME");
        return dotenv;
    }

    private static void validateEnvVariable(Dotenv dotenv, String key) {
        if (dotenv.get(key) == null || dotenv.get(key).isEmpty()) {
            throw new IllegalStateException("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è " + key + " –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env —Ñ–∞–π–ª–µ");
        }
    }

    private static Connection createDatabaseConnection(Dotenv dotenv) throws SQLException {
        return DriverManager.getConnection(
                dotenv.get("POSTGRES_URL"),
                dotenv.get("POSTGRES_USER"),
                dotenv.get("POSTGRES_PASSWORD")
        );
    }

    public static Command getCommand(String messageText, long chatId) {
        if ("/start".equalsIgnoreCase(messageText.trim())) {
            return new StartCommand();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
        if ("–æ—Ç–º–µ–Ω–∞".equalsIgnoreCase(messageText.trim())) {
            waitingForWineInput.remove(chatId);
            return (cId, input) -> {
                SendMessage message = new SendMessage(String.valueOf(cId),
                        "–ü–æ–∏—Å–∫ —Å–æ—á–µ—Ç–∞–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω.");
                message.setReplyMarkup(createMainKeyboard());
                return message;
            };
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–∏–Ω–∞
        if (waitingForWineInput.getOrDefault(chatId, false)) {
            waitingForWineInput.remove(chatId);
            return new PairCommand(wineDAO, dishDAO, messageText.trim(), chatId, pairingContexts);
        }

        String state = userStates.get(chatId);
        if (state != null) {
            return handleUserState(state, chatId, messageText.trim());
        }

        String lowerCaseText = messageText.toLowerCase().trim();

        if (lowerCaseText.startsWith("/red")) {
            return createWineTypeFilterCommand("–ö—Ä–∞—Å–Ω–æ–µ");
        }
        else if (lowerCaseText.startsWith("/white")) {
            return createWineTypeFilterCommand("–ë–µ–ª–æ–µ");
        }
        else if (lowerCaseText.startsWith("/rose")) {
            return createWineTypeFilterCommand("–†–æ–∑–æ–≤–æ–µ");
        }
        else if (lowerCaseText.startsWith("/dessert")) {
            return createWineTypeFilterCommand("–î–µ—Å–µ—Ä—Ç–Ω–æ–µ");
        }
        else if (lowerCaseText.startsWith("/pair")) {
            waitingForWineInput.put(chatId, true);
            return (cId, input) -> {
                SendMessage message = new SendMessage(String.valueOf(cId),
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π:");
                message.setReplyMarkup(createCancelKeyboard());
                return message;
            };
        }
        else if (lowerCaseText.startsWith("/wines")) {
            return createListCommand("–°–ø–∏—Å–æ–∫ –≤–∏–Ω:\n", wineDAO::getAllWines, Wine::toString);
        }
        else if (lowerCaseText.startsWith("/dishes")) {
            return createListCommand("–°–ø–∏—Å–æ–∫ –±–ª—é–¥:\n", dishDAO::getAllDishes, Dish::toString);
        }
        else if (lowerCaseText.startsWith("/rate")) {
            return handleRateCommand(chatId);
        }
        else if (lowerCaseText.equals("—Ö–æ—Ä–æ—à–æ") || lowerCaseText.equals("–ø–ª–æ—Ö–æ")) {
            return handleRatingResponse(chatId, lowerCaseText);
        }
        else if (lowerCaseText.startsWith("/favorites")) {
            return (cId, input) -> {
                try {
                    List<String> favorites = ExcelFavoritesManager.getFavorites();
                    SendMessage message = new SendMessage(String.valueOf(cId), favorites.isEmpty() ?
                            "–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π –ø—É—Å—Ç" :
                            "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è:\n" + String.join("\n\n", favorites));
                    message.setReplyMarkup(createMainKeyboard());
                    return message;
                } catch (Exception e) {
                    return new SendMessage(String.valueOf(cId),
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π: " + e.getMessage());
                }
            };
        }
        else if (lowerCaseText.startsWith("/help")) {
            SendMessage helpMessage = new SendMessage(String.valueOf(chatId),
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                            "/pair - –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏—è –¥–ª—è –≤–∏–Ω–∞\n" +
                            "/red - –∫—Ä–∞—Å–Ω—ã–µ –≤–∏–Ω–∞\n" +
                            "/white - –±–µ–ª—ã–µ –≤–∏–Ω–∞\n" +
                            "/rose - —Ä–æ–∑–æ–≤—ã–µ –≤–∏–Ω–∞\n" +
                            "/dessert - –¥–µ—Å–µ—Ä—Ç–Ω—ã–µ –≤–∏–Ω–∞\n" +
                            "/wines - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–Ω\n" +
                            "/dishes - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥\n" +
                            "/rate - –æ—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ\n" +
                            "/favorites - –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è\n" +
                            "/help - —Å–ø—Ä–∞–≤–∫–∞");
            helpMessage.setReplyMarkup(createMainKeyboard());
            return (cId, input) -> helpMessage;
        }

        return new UnknownCommand();
    }

    private static ReplyKeyboardMarkup createCancelKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("–û—Ç–º–µ–Ω–∞");
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private static Command handleRateCommand(long chatId) {
        return (cId, input) -> {
            PairingContext context = pairingContexts.get(chatId);
            if (context == null) {
                return new SendMessage(String.valueOf(cId),
                        "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–±–µ—Ä–∏—Ç–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pair [–≤–∏–Ω–æ]");
            }

            SendMessage message = new SendMessage(String.valueOf(cId),
                    "–¢–µ–∫—É—â–µ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:\n" +
                            "üç∑ –í–∏–Ω–æ: " + context.getWineName() + "\n" +
                            "üçΩ –ë–ª—é–¥–æ: " + context.getDish().getName() + "\n\n" +
                            "–ù–∞–ø–∏—à–∏—Ç–µ '—Ö–æ—Ä–æ—à–æ' –∏–ª–∏ '–ø–ª–æ—Ö–æ' –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç—Ç–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è");
            message.setReplyMarkup(createRatingKeyboard());
            return message;
        };
    }

    private static Command handleRatingResponse(long chatId, String rating) {
        return (cId, input) -> {
            PairingContext context = pairingContexts.get(chatId);
            if (context == null) {
                return new SendMessage(String.valueOf(cId),
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–±–µ—Ä–∏—Ç–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ.");
            }

            if ("—Ö–æ—Ä–æ—à–æ".equals(rating)) {
                userStates.put(chatId, "CONFIRM_FAVORITE");
                SendMessage message = new SendMessage(String.valueOf(cId),
                        "–í—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–∞–∫ —Ö–æ—Ä–æ—à–µ–µ:\n" +
                                "üç∑ –í–∏–Ω–æ: " + context.getWineName() + "\n" +
                                "üçΩ –ë–ª—é–¥–æ: " + context.getDish().getName() + "\n\n" +
                                "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?");
                message.setReplyMarkup(createYesNoKeyboard());
                return message;
            } else {
                pairingContexts.remove(chatId);
                SendMessage response = new SendMessage(String.valueOf(cId),
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –°–æ—á–µ—Ç–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ.");
                response.setReplyMarkup(createMainKeyboard());
                return response;
            }
        };
    }

    private static Command createWineTypeFilterCommand(String russianType) {
        return (cId, input) -> {
            try {
                List<Wine> wines = wineDAO.getAllWines().stream()
                        .filter(w -> w.getType().toString().equalsIgnoreCase(russianType))
                        .toList();

                if (wines.isEmpty()) {
                    return new SendMessage(String.valueOf(cId), "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–Ω —Ç–∏–ø–∞: " + russianType);
                }

                StringBuilder response = new StringBuilder("–í–∏–Ω–∞ —Ç–∏–ø–∞ " + russianType + ":\n\n");
                for (Wine wine : wines) {
                    response.append(wine.toString()).append("\n\n");
                }
                return new SendMessage(String.valueOf(cId), response.toString());
            } catch (Exception e) {
                return new SendMessage(String.valueOf(cId),
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–Ω: " + e.getMessage());
            }
        };
    }

    private static Command handleUserState(String state, long chatId, String input) {
        if ("CONFIRM_FAVORITE".equals(state)) {
            userStates.remove(chatId);
            PairingContext context = pairingContexts.get(chatId);
            if (context == null) {
                return (cId, ignored) -> new SendMessage(String.valueOf(cId),
                        "–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—á–µ—Ç–∞–Ω–∏—è —É—Ç–µ—Ä—è–Ω");
            }

            if ("–¥–∞".equalsIgnoreCase(input)) {
                try {
                    ExcelFavoritesManager.addFavorite(context.getWineName(),
                            context.getDish().getName() + " - " + context.getDish().toString());
                    pairingContexts.remove(chatId);
                    SendMessage message = new SendMessage(String.valueOf(chatId),
                            "–°–æ—á–µ—Ç–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!");
                    message.setReplyMarkup(createMainKeyboard());
                    return (cId, ignored2) -> message;
                } catch (Exception e) {
                    return (cId, ignored2) -> new SendMessage(String.valueOf(cId),
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: " + e.getMessage());
                }
            } else {
                pairingContexts.remove(chatId);
                SendMessage message = new SendMessage(String.valueOf(chatId),
                        "–•–æ—Ä–æ—à–æ, —Å–æ—á–µ—Ç–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.");
                message.setReplyMarkup(createMainKeyboard());
                return (cId, ignored2) -> message;
            }
        }
        return new UnknownCommand();
    }

    public static ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("/red");
        row1.add("/white");
        row1.add("/rose");
        row1.add("/dessert");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("/wines");
        row2.add("/dishes");
        row2.add("/pair");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("/rate");
        row3.add("/favorites");
        row3.add("/help");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private static ReplyKeyboardMarkup createRatingKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("—Ö–æ—Ä–æ—à–æ");
        row.add("–ø–ª–æ—Ö–æ");
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private static ReplyKeyboardMarkup createYesNoKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("–î–∞");
        row.add("–ù–µ—Ç");
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private static <T> Command createListCommand(
            String header,
            ThrowingSupplier<List<T>> supplier,
            Function<T, String> formatter) {
        return (cId, input) -> {
            try {
                List<T> items = supplier.get();
                if (items.isEmpty()) {
                    return new SendMessage(String.valueOf(cId), "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç");
                }
                StringBuilder response = new StringBuilder(header);
                for (T item : items) {
                    response.append(formatter.apply(item)).append("\n\n");
                }
                return new SendMessage(String.valueOf(cId), response.toString());
            } catch (Exception e) {
                return new SendMessage(String.valueOf(cId),
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            }
        };
    }

    @FunctionalInterface
    private interface ThrowingSupplier<T> {
        T get() throws Exception;
    }

    public static class PairingContext {
        private final String wineName;
        private final Dish dish;

        public PairingContext(String wineName, Dish dish) {
            this.wineName = wineName;
            this.dish = dish;
        }

        public String getWineName() {
            return wineName;
        }

        public Dish getDish() {
            return dish;
        }
    }
}