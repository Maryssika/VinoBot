package org.example.Bot.Commands;

import org.example.Bot.Commands.Factories.CommandFactory;
import org.example.DAO.Dish;
import org.example.DAO.DishDAO;
import org.example.DAO.WineDAO;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;

import java.util.List;
import java.util.Map;
import java.util.Objects;

import static org.example.Bot.Commands.Factories.CommandFactory.createMainKeyboard;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π –±–ª—é–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–∏–Ω—É.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Command –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥–±–æ—Ä —Å–æ—á–µ—Ç–∞–Ω–∏–π.
 */
public class PairCommand implements Command {
    // DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–Ω–∞–º–∏
    private final WineDAO wineDAO;
    // DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª—é–¥–∞–º–∏
    private final DishDAO dishDAO;
    // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Å–æ—á–µ—Ç–∞–Ω–∏—è
    private final String wineName;
    // ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private final long chatId;
    // –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —Ç–µ–∫—É—â–∏—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
    private final Map<Long, CommandFactory.PairingContext> pairingContexts;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–±–æ—Ä–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π
     * @param wineDAO DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–Ω–∞–º–∏
     * @param dishDAO DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª—é–¥–∞–º–∏
     * @param wineName –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param pairingContexts –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —Å–æ—á–µ—Ç–∞–Ω–∏–π
     */
    public PairCommand(WineDAO wineDAO, DishDAO dishDAO, String wineName,
                       long chatId, Map<Long, CommandFactory.PairingContext> pairingContexts) {
        this.wineDAO = wineDAO;
        this.dishDAO = dishDAO;
        this.wineName = wineName;
        this.chatId = chatId;
        this.pairingContexts = pairingContexts;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–±–æ—Ä —Å–æ—á–µ—Ç–∞–Ω–∏–π –±–ª—é–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–Ω–∞
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
     * @param input –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
     * @return SendMessage —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–¥–±–æ—Ä–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π
     */
    @Override
    public SendMessage execute(String chatId, String input) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥, —Å–æ—á–µ—Ç–∞—é—â–∏—Ö—Å—è —Å –≤–∏–Ω–æ–º
            List<String> pairingNames = wineDAO.findPairings(wineName);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –≤ –æ–±—ä–µ–∫—Ç—ã Dish
            List<Dish> pairings = pairingNames.stream()
                    .map(dishName -> {
                        try {
                            // –ò—â–µ–º –±–ª—é–¥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                            return dishDAO.getAllDishes().stream()
                                    .filter(d -> d.getName().equalsIgnoreCase(dishName))
                                    .findFirst()
                                    .orElse(null);
                        } catch (Exception e) {
                            return null;
                        }
                    })
                    .filter(Objects::nonNull) // –§–∏–ª—å—Ç—Ä—É–µ–º null-–∑–Ω–∞—á–µ–Ω–∏—è
                    .toList();

            // –ï—Å–ª–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (pairings.isEmpty()) {
                return new SendMessage(chatId, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª—é–¥ –¥–ª—è –≤–∏–Ω–∞: " + wineName);
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–æ—á–µ—Ç–∞–Ω–∏—è–º–∏
            StringBuilder response = new StringBuilder("üç∑ *–ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –¥–ª—è " + wineName + ":*\n\n");
            for (Dish dish : pairings) {
                response.append("üçΩ *").append(dish.getName()).append("*\n")
                        .append(dish.toString()).append("\n\n");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è
            pairingContexts.put(this.chatId,
                    new CommandFactory.PairingContext(wineName, pairings.get(0)));

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—á–µ—Ç–∞–Ω–∏—è
            response.append("–î–ª—è –æ—Ü–µ–Ω–∫–∏ —ç—Ç–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rate");

            // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            SendMessage message = new SendMessage(chatId, response.toString());
            message.setParseMode("Markdown"); // –í–∫–ª—é—á–∞–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
            message.setReplyMarkup(createMainKeyboard()); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            return message;

        } catch (Exception e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return new SendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—á–µ—Ç–∞–Ω–∏–π: " + e.getMessage());
        }
    }
}