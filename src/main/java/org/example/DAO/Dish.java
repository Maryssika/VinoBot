package org.example.DAO;

import java.util.Objects;

/**
 * –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –±–ª—é–¥–æ —Å –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.
 * –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏,
 * –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –±–ª—é–¥–∞.
 */
public class Dish {

    private int id;
    private String name;
    private DishCategory category;
    private int fatContent;
    private int proteinContent;
    private int cookingTime;
    private String ingredients;
    private String recipe;

    /**
     * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥
     */
    public enum DishCategory {
        –ú—è—Å–æ, –†—ã–±–∞, –û–≤–æ—â–∏, –°—ã—Ä, –î–µ—Å–µ—Ä—Ç
    }

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    public Dish() {
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     * @param name –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥–∞
     * @param fatContent —É—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏ (1-5)
     * @param proteinContent —É—Ä–æ–≤–µ–Ω—å –±–µ–ª–∫–∞ (1-5)
     * @throws IllegalArgumentException –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º
     */
    public Dish(String name, DishCategory category, int fatContent, int proteinContent) {
        this.name = name;
        this.category = category;
        setFatContent(fatContent);
        setProteinContent(proteinContent);
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    /**
     * @return —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª—é–¥–∞
     */
    public int getId() {
        return id;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª—é–¥–∞
     * @param id –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * @return –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
     */
    public String getName() {
        return name;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
     * @param name –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
     * @throws IllegalArgumentException –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ
     */
    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        this.name = name;
    }

    /**
     * @return –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥–∞
     */
    public DishCategory getCategory() {
        return category;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞
     * @param category –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     * @throws NullPointerException –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è null
     */
    public void setCategory(DishCategory category) {
        this.category = Objects.requireNonNull(category, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
    }

    /**
     * @return —É—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏ (1-5)
     */
    public int getFatContent() {
        return fatContent;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏
     * @param fatContent –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5
     * @throws IllegalArgumentException –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    public void setFatContent(int fatContent) {
        if (fatContent < 1 || fatContent > 5) {
            throw new IllegalArgumentException("–£—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 5");
        }
        this.fatContent = fatContent;
    }

    /**
     * @return —É—Ä–æ–≤–µ–Ω—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–ª–∫–∞ (1-5)
     */
    public int getProteinContent() {
        return proteinContent;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–ª–∫–∞
     * @param proteinContent –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5
     * @throws IllegalArgumentException –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    public void setProteinContent(int proteinContent) {
        if (proteinContent < 1 || proteinContent > 5) {
            throw new IllegalArgumentException("–£—Ä–æ–≤–µ–Ω—å –±–µ–ª–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 5");
        }
        this.proteinContent = proteinContent;
    }

    /**
     * @return –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
     */
    public int getCookingTime() {
        return cookingTime;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
     * @param cookingTime –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
     * @throws IllegalArgumentException –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
     */
    public void setCookingTime(int cookingTime) {
        if (cookingTime < 0) {
            throw new IllegalArgumentException("–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º");
        }
        this.cookingTime = cookingTime;
    }

    /**
     * @return —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –±–ª—é–¥–∞
     */
    public String getIngredients() {
        return ingredients;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
     * @param ingredients —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
     */
    public void setIngredients(String ingredients) {
        this.ingredients = ingredients;
    }

    /**
     * @return —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞
     */
    public String getRecipe() {
        return recipe;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
     * @param recipe —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
     */
    public void setRecipe(String recipe) {
        this.recipe = recipe;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª—é–¥–æ –∂–∏—Ä–Ω—ã–º
     * @return true –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏ 4 –∏–ª–∏ 5
     */
    public boolean isRichInFat() {
        return fatContent >= 4;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª—é–¥–æ –±–æ–≥–∞—Ç—ã–º –±–µ–ª–∫–æ–º
     * @return true –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –±–µ–ª–∫–∞ 4 –∏–ª–∏ 5
     */
    public boolean isHighProtein() {
        return proteinContent >= 4;
    }

    /**
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –±–ª—é–¥–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É, –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param o –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     * @return true –µ—Å–ª–∏ –±–ª—é–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Dish dish = (Dish) o;
        return id == dish.id &&
                Objects.equals(name, dish.name) &&
                category == dish.category;
    }

    /**
     * @return —Ö—ç—à-–∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ id, –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, name, category);
    }

    /**
     * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    @Override
    public String toString() {
        return String.format(
                "*%s* (%s)\n\n" +
                        "‚è± *–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:* %s\n" +
                        "üîπ *–ñ–∏—Ä–Ω–æ—Å—Ç—å:* %d/5\n" +
                        "üîπ *–ë–µ–ª–æ–∫:* %d/5\n\n" +
                        "üçΩ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n%s\n\n" +
                        "üìù *–†–µ—Ü–µ–ø—Ç:*\n%s",
                name, category,
                getCookingTimeFormatted(),
                fatContent, proteinContent,
                ingredients != null ? ingredients : "–Ω–µ —É–∫–∞–∑–∞–Ω—ã",
                recipe != null ? recipe : "–†–µ—Ü–µ–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        );
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     * @return —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "2 —á 30 –º–∏–Ω" –∏–ª–∏ "45 –º–∏–Ω"
     */
    public String getCookingTimeFormatted() {
        if (cookingTime == 0) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        int hours = cookingTime / 60;
        int minutes = cookingTime % 60;

        if (hours > 0) {
            return String.format("%d —á %d –º–∏–Ω", hours, minutes);
        } else {
            return String.format("%d –º–∏–Ω", minutes);
        }
    }
}